import pandas as pd

def Read(pdf_path, page,top,left,width,height,columns_spaces,columns_names,clear_table=True):
    #Esta função lê 1 pagina do pdf e retorna 1 dataframe desta pagina
    #pdf_path = string com caminho do arquivo
    #page = numero da pagina do arquivo
    #top = distancia em pontos (padrao pdf) entre o topo da pagina e o topo da tabela
    #left = distancia em pontos (padrao pdf) entre a esquerda da pagina e a esquerda da tabela
    #width = largura da tabela em pontos em pontos (padrao pdf)
    #heigth = altura da tabela em pontos (padrao pdf)
    #columns_spaces = lista com espacamento entre as colunas [margem esquerda da tabela para 1a coluna, 1a para 2a, ...]
    #columns_names = lista com nome de cada coluna
    #clear_table = booleano para limpar ou naio a tabela conforme criterios abaixo

    #listando posicao das colunas em relacao ao lado esquerdo da pagina
    pos_left=[]
    pos_left.append(left+columns_spaces[0])
    for i in range(1,len(columns_spaces)):
        pos_left.append(pos_left[i-1]+columns_spaces[i])

    #lendo pdf tabula e criando dataframe df
    dfs = tabula.read_pdf(pdf_path, pages=[page],guess=False,area=[top,left,top+height,left+width],columns=pos_left)
    df = dfs[0]

    # print(df)
    if clear_table==True:
        #limpando dataframe nas celulas que vem com '-' ou '`' (os separadores usados pelo ASME sao diferentes '–'):
        #Exclui espacos do string ' '
        #Exclui '-'
        #Exclui ','
        #Exclui '`'
        for i in range(len(df)):
            for j in range(len(df.columns)):
                my_string=str(df.iloc[i,j])
                if '-' in my_string or '`' in my_string:
                    my_new_string=''
                    for char in my_string:
                        if char != '-' and char != ' ' and char !=',' and char != '`':
                            my_new_string+=char
                    df.iloc[i,j]=my_new_string

        #Exclui linhas se contém NaN em qualquer posicao
        df=df.dropna()
        df = df.reset_index(drop=True)


    # renomeando as colunas, se foi passado o vetor nome
    if columns_names[0]!='NOT_USED':
        df.columns = columns_names

    return (df)


def Concat_dfs_horizontal(pdf_path, page_start,top,left,width,height,columns_spaces,columns_names,clear_table, page_skip):
    # this function concatenate the dataframes generated by the four pages:
    # The concatanation procedure occurs in the horizontal direction (axis=1), because the lines of each dataframe corresponds to the same material
    # For dataframes pgs 2,3,... excludes de first column (Line No.)
    # The parameters are the same of the function Page_Reader.Read, but in this case are lists with data of several pages
    df_temp=[]
    df=pd.DataFrame() #empty dataframe
    number_of_pages=len(top)

    for i in range(number_of_pages):
        current_page_pattern_number = i+1
        # print(current_page_pattern_number)
        if current_page_pattern_number not in page_skip:
            df_temp.append(Read(pdf_path,page_start+i,top[i],left[i],width[i],height[i],columns_spaces[i],columns_names[i],clear_table[i]))
            if i>0:
                df_temp[i].drop(df_temp[i].columns[0], axis=1, inplace=True)

    df = pd.concat([df_temp[i] for i in range(number_of_pages)], axis=1)
    return df






def Read_Table_Complete(pdf_path, page_start, page_end,top,left,width,height,columns_spaces,columns_names,clear_table, page_skip):
    # this function returns a dataframe with all data in ASME Table 1-A between pages 'page_start' and 'page_end'
    # The function reads 4 pages at once using function 'Read_Table_1A_Concat_pg1_4', and writes it in 'df_actual'
    # This procedure is repeated for de next pages and each dataframe 'df_actual' is appended in dataframe 'df_complete'
    # The parameters are the same of the function Page_Reader.Read, but in this case are lists with data of several pages
    df = pd.DataFrame()
    number_of_pages_repeated=len(top)+len(page_skip)

    for page_start_actual in range(page_start, page_end, number_of_pages_repeated):
        df_temp = Concat_dfs_horizontal(pdf_path, page_start_actual,top,left,width,height,columns_spaces,columns_names,clear_table, page_skip)
        df = df.append(df_temp)
        percentual_completo=100*(page_start_actual+(number_of_pages_repeated-1)-page_start)/(page_end-page_start)
        percentual_completo="{:.2f}".format(percentual_completo)
        print(f'{percentual_completo}%')
    df = df.reset_index(drop=True)
    return df


